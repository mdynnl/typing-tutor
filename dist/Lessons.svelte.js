import './Lessons.svelte.css.proxy.js';
/* src/Lessons.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	space,
	text,
	toggle_class
} from "../_snowpack/pkg/svelte/internal.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

// (6:4) {#each lessons as lesson, i}
function create_each_block(ctx) {
	let div;
	let t0;
	let t1_value = /*i*/ ctx[5] + 1 + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[2](/*i*/ ctx[5]);
	}

	return {
		c() {
			div = element("div");
			t0 = text("Lesson ");
			t1 = text(t1_value);
			t2 = space();
			attr(div, "class", "svelte-a0ckry");
			toggle_class(div, "active", /*active*/ ctx[0] === /*i*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);

			if (!mounted) {
				dispose = listen(div, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*active*/ 1) {
				toggle_class(div, "active", /*active*/ ctx[0] === /*i*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let section;
	let each_value = /*lessons*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			section = element("section");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(section, "class", "svelte-a0ckry");
		},
		m(target, anchor) {
			insert(target, section, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(section, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*active, lessons*/ 3) {
				each_value = /*lessons*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(section, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { lessons = ["a", "b"] } = $$props;
	let { active = 0 } = $$props;
	const click_handler = i => $$invalidate(0, active = i);

	$$self.$$set = $$props => {
		if ("lessons" in $$props) $$invalidate(1, lessons = $$props.lessons);
		if ("active" in $$props) $$invalidate(0, active = $$props.active);
	};

	return [active, lessons, click_handler];
}

class Lessons extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { lessons: 1, active: 0 });
	}
}

export default Lessons;